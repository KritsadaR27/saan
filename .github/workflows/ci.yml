name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'

jobs:
  test-go-services:
    name: Test Go Services
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Test Order Service
      run: |
        cd services/order
        go mod download
        go test -v ./...
    
    - name: Build Order Service
      run: |
        cd services/order
        make build
    
    - name: Run Order Service Tests with Coverage
      run: |
        cd services/order
        go test -v -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: go-coverage-report
        path: services/order/coverage.html

  test-frontend:
    name: Test Frontend Applications
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies - Web App
      run: |
        cd apps/web
        npm ci
    
    - name: Install dependencies - Admin App
      run: |
        cd apps/admin
        npm ci
    
    - name: Build Web App
      run: |
        cd apps/web
        npm run build
    
    - name: Build Admin App
      run: |
        cd apps/admin
        npm run build

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
    
    - name: Lint Go code
      run: |
        cd services/order
        $(go env GOPATH)/bin/golangci-lint run
    
    - name: Check Go formatting
      run: |
        cd services/order
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
    
    - name: Run vulnerability check
      run: |
        cd services/order
        $(go env GOPATH)/bin/govulncheck ./...

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-go-services, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Order Service Docker Image
      run: |
        cd services/order
        docker build -t saan/order-service:latest .
    
    - name: Build Web App Docker Image
      run: |
        cd apps/web
        docker build -t saan/web-app:latest .
    
    - name: Build Admin App Docker Image
      run: |
        cd apps/admin
        docker build -t saan/admin-app:latest .
