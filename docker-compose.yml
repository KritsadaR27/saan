# Saan System - Development Environment
services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-saan}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-saan_password}
      POSTGRES_DB: ${POSTGRES_DB:-saan_db}
    ports:
      - "5532:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/migrations:/migrations
      - ./infrastructure/database/seeds:/seeds
    networks:
      - saan-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-saan}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saan-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Bus
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - saan-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - saan-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--zookeeper", "zookeeper:2181", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Go Microservices
  order:
    build:
      context: ./services/order
      dockerfile: Dockerfile
    container_name: order
    env_file:
      - .env.local
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=saan
      - DB_PASSWORD=saan_password
      - DB_NAME=saan_db
      - DB_SSLMODE=disable
      - SERVER_PORT=8081
      - GO_ENV=development
      - CHAT_SERVICE_URL=http://chatbot:8090
      - INVENTORY_SERVICE_URL=http://inventory:8082
    ports:
      - "8081:8081"
    volumes:
      - ./services/order:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped

  # Integrations
  loyverse:
    build:
      context: ./integrations/loyverse
      dockerfile: Dockerfile
    container_name: loyverse-integration
    env_file:
      - .env.local
    environment:
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=loyverse-events
      - PORT=8091
      - TZ=Asia/Bangkok
      - LOYVERSE_WEBHOOK_SECRET=
    ports:
      - "8091:8091"
    volumes:
      - ./integrations/loyverse:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped

  # Webhook Services
  loyverse-webhook:
    build:
      context: ./webhooks/loyverse-webhook
      dockerfile: Dockerfile
    container_name: loyverse-webhook
    ports:
      - "8093:8093"
    environment:
      PORT: "8093"
      LOYVERSE_WEBHOOK_SECRET: ${LOYVERSE_WEBHOOK_SECRET:-}
      KAFKA_BROKERS: kafka:9092
      REDIS_ADDR: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8093/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  chat-webhook:
    build:
      context: ./webhooks/chat-webhook
      dockerfile: Dockerfile
    container_name: chat-webhook
    ports:
      - "8094:8094"
    environment:
      PORT: "8094"
      FACEBOOK_VERIFY_TOKEN: ${FACEBOOK_VERIFY_TOKEN:-}
      FACEBOOK_PAGE_ACCESS_TOKEN: ${FACEBOOK_PAGE_ACCESS_TOKEN:-}
      FACEBOOK_APP_SECRET: ${FACEBOOK_APP_SECRET:-}
      LINE_CHANNEL_SECRET: ${LINE_CHANNEL_SECRET:-}
      LINE_CHANNEL_ACCESS_TOKEN: ${LINE_CHANNEL_ACCESS_TOKEN:-}
      KAFKA_BROKERS: kafka:9092
      REDIS_ADDR: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8094/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  delivery-webhook:
    build:
      context: ./webhooks/delivery-webhook
      dockerfile: Dockerfile
    container_name: delivery-webhook
    ports:
      - "8095:8095"
    environment:
      PORT: "8095"
      GRAB_WEBHOOK_SECRET: ${GRAB_WEBHOOK_SECRET:-}
      LINEMAN_WEBHOOK_SECRET: ${LINEMAN_WEBHOOK_SECRET:-}
      KAFKA_BROKERS: kafka:9092
      REDIS_ADDR: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8095/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-webhook:
    build:
      context: ./webhooks/payment-webhook
      dockerfile: Dockerfile
    container_name: payment-webhook
    ports:
      - "8096:8096"
    environment:
      PORT: "8096"
      OMISE_WEBHOOK_SECRET: ${OMISE_WEBHOOK_SECRET:-}
      2C2P_WEBHOOK_SECRET: ${2C2P_WEBHOOK_SECRET:-}
      KAFKA_BROKERS: kafka:9092
      REDIS_ADDR: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8096/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local

# Networks
networks:
  saan-network:
    driver: bridge
