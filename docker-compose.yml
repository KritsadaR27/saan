version: '3.8'

# Saan System - Development Environment
services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-saan}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-saan_password}
      POSTGRES_DB: ${POSTGRES_DB:-saan_db}
    ports:
      - "5532:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/migrations:/migrations
      - ./infrastructure/database/seeds:/seeds
    networks:
      - saan-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-saan}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saan-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Microservices
  order:
    build:
      context: ./services/order
      dockerfile: Dockerfile
    container_name: order
    env_file:
      - .env.local
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=saan
      - DB_PASSWORD=saan_password
      - DB_NAME=saan_db
      - DB_SSLMODE=disable
      - SERVER_PORT=8081
      - GO_ENV=development
      - CHAT_SERVICE_URL=http://chatbot:8090
      - INVENTORY_SERVICE_URL=http://inventory:8082
    ports:
      - "8081:8081"
    volumes:
      - ./services/order:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Networks
networks:
  saan-network:
    driver: bridge
