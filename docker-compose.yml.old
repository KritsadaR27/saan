# Saan System - Development Environment
services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-saan}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-saan_password}
      POSTGRES_DB: ${POSTGRES_DB:-saan_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/migrations:/migrations
      - ./infrastructure/database/seeds:/seeds
    networks:
      - saan-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-saan}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saan-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Bus - Kafka in KRaft Mode (No Zookeeper)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    environment:
      # KRaft Mode Configuration
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      
      # Cluster Configuration
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      
      # Topic and Replication Configuration
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1
      
      # Performance and Storage Configuration
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_LOG_CLEANUP_POLICY: 'delete'
      
      # JVM Configuration
      KAFKA_HEAP_OPTS: '-Xmx1G -Xms1G'
      
      # Development Configuration
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'WARN'
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - saan-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Go Microservices
  # Chatbot Service (8090)
  chatbot:
    build:
      context: ./services/chat
      dockerfile: Dockerfile
    container_name: chatbot
    env_file:
      - .env.local
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=saan
      - DB_PASSWORD=saan_password
      - DB_NAME=saan_db
      - DB_SSLMODE=disable
      - SERVER_PORT=8090
      - GO_ENV=development
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
      - CUSTOMER_SERVICE_URL=http://customer:8110
      - ORDER_SERVICE_URL=http://order:8081
      - INVENTORY_SERVICE_URL=http://inventory:8082
    ports:
      - "8090:8090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service (8081)
  order:
    build:
      context: ./services/order
      dockerfile: Dockerfile
    container_name: order
    env_file:
      - .env.local
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=saan
      - DB_PASSWORD=saan_password
      - DB_NAME=saan_db
      - DB_SSLMODE=disable
      - SERVER_PORT=8081
      - GO_ENV=development
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
      # Service URLs (following PROJECT_RULES standards)
      - CHATBOT_SERVICE_URL=http://chatbot:8090
      - INVENTORY_SERVICE_URL=http://inventory:8082
      - CUSTOMER_SERVICE_URL=http://customer:8110
      - PAYMENT_SERVICE_URL=http://payment:8087
      - SHIPPING_SERVICE_URL=http://shipping:8086
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Inventory Service (8082)
  inventory:
    build:
      context: ./services/inventory
      dockerfile: Dockerfile
    container_name: inventory
    env_file:
      - .env.local
    environment:
      - PORT=8082
      - GO_ENV=development
      - DATABASE_URL=postgres://saan:saan_password@postgres:5432/saan_db?sslmode=disable
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CONSUMER_GROUP=inventory-service
      - LOYVERSE_EVENT_TOPIC=loyverse-events
      # Service URLs (following PROJECT_RULES standards)
      - ORDER_SERVICE_URL=http://order:8081
      - CHATBOT_SERVICE_URL=http://chatbot:8090
      - PRODUCT_SERVICE_URL=http://product:8083
      - LOYVERSE_SERVICE_URL=http://loyverse:8100
      - ADMIN_TOKEN=saan-dev-admin-2024-secure
      - LOG_LEVEL=debug
      - LOG_FORMAT=json
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service (8083) - NEW
  product:
    build:
      context: ./services/product
      dockerfile: Dockerfile
    container_name: product
    env_file:
      - .env.local
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=saan
      - DB_PASSWORD=saan_password
      - DB_NAME=saan_db
      - DB_SSLMODE=disable
      - SERVER_PORT=8083
      - GO_ENV=development
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
      # Service URLs (following PROJECT_RULES standards)
      - INVENTORY_SERVICE_URL=http://inventory:8082
      - LOYVERSE_SERVICE_URL=http://loyverse:8100
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Customer Service (8110)
  customer:
    build:
      context: ./services/order
      dockerfile: Dockerfile
    container_name: order
    env_file:
      - .env.local
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=saan
      - DB_PASSWORD=saan_password
      - DB_NAME=saan_db
      - DB_SSLMODE=disable
      - SERVER_PORT=8081
      - GO_ENV=development
      - CHAT_SERVICE_URL=http://chatbot:8090
      - INVENTORY_SERVICE_URL=http://inventory:8082
    ports:
      - "8081:8081"
    volumes:
      - ./services/order:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped

  # Customer Service (8110)
  customer:
    build:
      context: ./services/customer
      dockerfile: Dockerfile
    container_name: customer
    env_file:
      - .env.local
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=saan
      - DB_PASSWORD=saan_password
      - DB_NAME=saan_db
      - DB_SSLMODE=disable
      - SERVER_PORT=8110
      - GO_ENV=development
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
      # Service URLs (following PROJECT_RULES standards)
      - ORDER_SERVICE_URL=http://order:8081
      - LOYVERSE_SERVICE_URL=http://loyverse:8100
      - LOYVERSE_API_KEY=${LOYVERSE_API_KEY:-}
    ports:
      - "8110:8110"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8110/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Integrations
  loyverse:
    build:
      context: ./integrations/loyverse
      dockerfile: Dockerfile
    container_name: loyverse
    env_file:
      - .env.local
    environment:
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=loyverse-events
      - PORT=8100
      - TZ=Asia/Bangkok
      # Service URLs (following PROJECT_RULES standards)
      - PRODUCT_SERVICE_URL=http://product:8083
      - CUSTOMER_SERVICE_URL=http://customer:8110
      - INVENTORY_SERVICE_URL=http://inventory:8082
      # Master Data Sync (ทุก 12 ชั่วโมง - ไม่ค่อยเปลี่ยน)
      - CATEGORY_SYNC_INTERVAL=0 */12 * * *      # ทุก 12 ชม
      - SUPPLIER_SYNC_INTERVAL=0 */12 * * *      # ทุก 12 ชม  
      - PAYMENT_TYPE_SYNC_INTERVAL=0 */12 * * *  # ทุก 12 ชม
      - EMPLOYEE_SYNC_INTERVAL=0 */12 * * *      # ทุก 12 ชม
      - STORE_SYNC_INTERVAL=0 */12 * * *         # ทุก 12 ชม
      # Real-time Data Sync (น้อยลง เพราะมี webhook)
      - PRODUCT_SYNC_INTERVAL=0 */6 * * *        # ทุก 6 ชม (มี webhook แล้ว)
      - INVENTORY_SYNC_INTERVAL=0 */4 * * *      # ทุก 4 ชม (มี webhook แล้ว)
      - RECEIPT_SYNC_INTERVAL=0 */2 * * *        # ทุก 2 ชม (มี webhook แล้ว)
      - CUSTOMER_SYNC_INTERVAL=0 */8 * * *       # ทุก 8 ชม (มี webhook แล้ว)
    ports:
      - "8100:8100"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Webhook Services
  loyverse-webhook:
    build:
      context: ./webhooks/loyverse-webhook
      dockerfile: Dockerfile
    container_name: loyverse-webhook
    ports:
      - "8093:8093"
    environment:
      PORT: "8093"
      LOYVERSE_WEBHOOK_SECRET: ${LOYVERSE_WEBHOOK_SECRET:-}
      KAFKA_BROKERS: kafka:9092
      REDIS_ADDR: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8093/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  chat-webhook:
    build:
      context: ./webhooks/chat-webhook
      dockerfile: Dockerfile
    container_name: chat-webhook
    ports:
      - "8094:8094"
    environment:
      PORT: "8094"
      FACEBOOK_VERIFY_TOKEN: ${FACEBOOK_VERIFY_TOKEN:-}
      FACEBOOK_PAGE_ACCESS_TOKEN: ${FACEBOOK_PAGE_ACCESS_TOKEN:-}
      FACEBOOK_APP_SECRET: ${FACEBOOK_APP_SECRET:-}
      LINE_CHANNEL_SECRET: ${LINE_CHANNEL_SECRET:-}
      LINE_CHANNEL_ACCESS_TOKEN: ${LINE_CHANNEL_ACCESS_TOKEN:-}
      KAFKA_BROKERS: kafka:9092
      REDIS_ADDR: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8094/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  delivery-webhook:
    build:
      context: ./webhooks/delivery-webhook
      dockerfile: Dockerfile
    container_name: delivery-webhook
    ports:
      - "8095:8095"
    environment:
      PORT: "8095"
      GRAB_WEBHOOK_SECRET: ${GRAB_WEBHOOK_SECRET:-}
      LINEMAN_WEBHOOK_SECRET: ${LINEMAN_WEBHOOK_SECRET:-}
      KAFKA_BROKERS: kafka:9092
      REDIS_ADDR: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8095/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-webhook:
    build:
      context: ./webhooks/payment-webhook
      dockerfile: Dockerfile
    container_name: payment-webhook
    ports:
      - "8096:8096"
    environment:
      PORT: "8096"
      OMISE_WEBHOOK_SECRET: ${OMISE_WEBHOOK_SECRET:-}
      C2P_WEBHOOK_SECRET: ${C2P_WEBHOOK_SECRET:-}
      KAFKA_BROKERS: kafka:9092
      REDIS_ADDR: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8096/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Shipping Service (8086)
  shipping:
    build:
      context: ./services/shipping
      dockerfile: Dockerfile
    container_name: shipping
    env_file:
      - .env.local
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=saan
      - DB_PASSWORD=saan_password
      - DB_NAME=saan_db
      - DB_SSLMODE=disable
      - SERVER_PORT=8086
      - GO_ENV=development
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
      - CUSTOMER_SERVICE_URL=http://customer:8110
      - ORDER_SERVICE_URL=http://order:8081
    ports:
      - "8086:8086"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service (8087)
  payment:
    build:
      context: ./services/payment
      dockerfile: Dockerfile
    container_name: payment
    env_file:
      - .env.local
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=saan
      - DB_PASSWORD=saan_password
      - DB_NAME=saan_db
      - DB_SSLMODE=disable
      - SERVER_PORT=8087
      - GO_ENV=development
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
      - OMISE_PUBLIC_KEY=${OMISE_PUBLIC_KEY:-}
      - OMISE_SECRET_KEY=${OMISE_SECRET_KEY:-}
      - C2P_MERCHANT_ID=${C2P_MERCHANT_ID:-}
      - C2P_SECRET_KEY=${C2P_SECRET_KEY:-}
    ports:
      - "8087:8087"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Finance Service (8085)
  finance:
    build:
      context: ./services/finance
      dockerfile: Dockerfile
    container_name: finance
    env_file:
      - .env.local
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=saan
      - DB_PASSWORD=saan_password
      - DB_NAME=saan_db
      - DB_SSLMODE=disable
      - SERVER_PORT=8085
      - GO_ENV=development
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
      - PAYMENT_SERVICE_URL=http://payment:8087
      - ORDER_SERVICE_URL=http://order:8081
      - PROFIT_PERCENTAGE=30.00
      - OWNER_PAY_PERCENTAGE=20.00
      - TAX_PERCENTAGE=15.00
    ports:
      - "8085:8085"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - saan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local

# Networks
networks:
  saan-network:
    driver: bridge
