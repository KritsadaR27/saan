package handlers

import (
	"database/sql"
	"net/http"
	"strconv"
	"time"

	"services/inventory/internal/infrastructure/cache"

	"github.com/gin-gonic/gin"
	"github.com/gorilla/websocket"
	"github.com/sirupsen/logrus"
)

type InventoryHandler struct {
	redisClient *cache.RedisClient
	db          *sql.DB
	logger      *logrus.Logger
	upgrader    websocket.Upgrader
}

func NewInventoryHandler(redisClient *cache.RedisClient, db *sql.DB, logger *logrus.Logger) *InventoryHandler {
	return &InventoryHandler{
		redisClient: redisClient,
		db:          db,
		logger:      logger,
		upgrader: websocket.Upgrader{
			CheckOrigin: func(r *http.Request) bool {
				return true // In production, implement proper origin checking
			},
		},
	}
}

// ===== PRODUCT ENDPOINTS =====

// GetAllProducts retrieves all products
func (h *InventoryHandler) GetAllProducts(c *gin.Context) {
	// Parse query parameters
	limit := 50
	if l := c.Query("limit"); l != "" {
		if parsed, err := strconv.Atoi(l); err == nil && parsed > 0 {
			limit = parsed
		}
	}

	page := 1
	if p := c.Query("page"); p != "" {
		if parsed, err := strconv.Atoi(p); err == nil && parsed > 0 {
			page = parsed
		}
	}

	// Get products from Redis
	products, err := h.redisClient.GetAllProducts(c.Request.Context())
	if err != nil {
		h.logger.WithError(err).Error("Failed to get products from Redis")
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to retrieve products",
			"message": err.Error(),
		})
		return
	}

	// Apply pagination
	start := (page - 1) * limit
	end := start + limit
	if start > len(products) {
		start = len(products)
	}
	if end > len(products) {
		end = len(products)
	}

	paginatedProducts := products[start:end]

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data": gin.H{
			"products": paginatedProducts,
			"pagination": gin.H{
				"page":        page,
				"limit":       limit,
				"total":       len(products),
				"total_pages": (len(products) + limit - 1) / limit,
			},
		},
	})
}

// GetProduct retrieves a single product by ID
func (h *InventoryHandler) GetProduct(c *gin.Context) {
	productID := c.Param("id")
	if productID == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Missing product ID",
			"message": "Product ID is required",
		})
		return
	}

	product, err := h.redisClient.GetProduct(c.Request.Context(), productID)
	if err != nil {
		h.logger.WithError(err).WithField("product_id", productID).Error("Failed to get product")
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "Product not found",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data":    product,
	})
}

// GetProductStock retrieves stock levels for a specific product
func (h *InventoryHandler) GetProductStock(c *gin.Context) {
	productID := c.Param("id")
	if productID == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Missing product ID",
			"message": "Product ID is required",
		})
		return
	}

	stockLevels, err := h.redisClient.GetProductStock(c.Request.Context(), productID)
	if err != nil {
		h.logger.WithError(err).WithField("product_id", productID).Error("Failed to get product stock")
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to retrieve stock levels",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data": gin.H{
			"product_id":    productID,
			"stock_levels":  stockLevels,
		},
	})
}

// SearchProducts searches for products by query
func (h *InventoryHandler) SearchProducts(c *gin.Context) {
	query := c.Query("q")
	if query == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Missing search query",
			"message": "Query parameter 'q' is required",
		})
		return
	}

	products, err := h.redisClient.SearchProducts(c.Request.Context(), query)
	if err != nil {
		h.logger.WithError(err).WithField("query", query).Error("Failed to search products")
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Search failed",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data": gin.H{
			"query":    query,
			"products": products,
			"count":    len(products),
		},
	})
}

// ===== STORE ENDPOINTS =====

// GetAllStores retrieves all stores
func (h *InventoryHandler) GetAllStores(c *gin.Context) {
	stores, err := h.redisClient.GetAllStores(c.Request.Context())
	if err != nil {
		h.logger.WithError(err).Error("Failed to get stores from Redis")
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to retrieve stores",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data": gin.H{
			"stores": stores,
			"count":  len(stores),
		},
	})
}

// GetStoreStock retrieves stock levels for a specific store
func (h *InventoryHandler) GetStoreStock(c *gin.Context) {
	storeID := c.Param("id")
	if storeID == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Missing store ID",
			"message": "Store ID is required",
		})
		return
	}

	stockLevels, err := h.redisClient.GetStoreStock(c.Request.Context(), storeID)
	if err != nil {
		h.logger.WithError(err).WithField("store_id", storeID).Error("Failed to get store stock")
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to retrieve store stock",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data": gin.H{
			"store_id":     storeID,
			"stock_levels": stockLevels,
			"count":        len(stockLevels),
		},
	})
}

// ===== CATEGORY ENDPOINTS =====

// GetAllCategories retrieves all categories
func (h *InventoryHandler) GetAllCategories(c *gin.Context) {
	categories, err := h.redisClient.GetAllCategories(c.Request.Context())
	if err != nil {
		h.logger.WithError(err).Error("Failed to get categories from Redis")
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to retrieve categories",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data": gin.H{
			"categories": categories,
			"count":      len(categories),
		},
	})
}

// ===== STOCK ENDPOINTS =====

// GetLowStockItems retrieves products with low stock
func (h *InventoryHandler) GetLowStockItems(c *gin.Context) {
	lowStockItems, err := h.redisClient.GetLowStockItems(c.Request.Context())
	if err != nil {
		h.logger.WithError(err).Error("Failed to get low stock items")
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to retrieve low stock items",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data": gin.H{
			"low_stock_items": lowStockItems,
			"count":           len(lowStockItems),
		},
	})
}

// GetInventoryAlerts retrieves inventory alerts
func (h *InventoryHandler) GetInventoryAlerts(c *gin.Context) {
	// This would typically fetch from database or cache
	// For now, return empty array
	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data": gin.H{
			"alerts": []interface{}{},
			"count":  0,
		},
	})
}

// ===== ADMIN ENDPOINTS =====

// TriggerSync triggers manual sync with Loyverse
func (h *InventoryHandler) TriggerSync(c *gin.Context) {
	// This would trigger the loyverse integration to sync
	// For now, just return success
	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "Sync triggered successfully",
	})
}

// RefreshCache refreshes the Redis cache
func (h *InventoryHandler) RefreshCache(c *gin.Context) {
	// This would refresh cache from source data
	// For now, just return success
	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "Cache refresh triggered",
	})
}

// ===== WEBSOCKET ENDPOINT =====

// WebSocketHandler handles WebSocket connections for real-time updates
func (h *InventoryHandler) WebSocketHandler(c *gin.Context) {
	conn, err := h.upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		h.logger.WithError(err).Error("Failed to upgrade WebSocket connection")
		return
	}
	defer conn.Close()

	h.logger.Info("WebSocket connection established")

	// Keep connection alive and send periodic updates
	for {
		// In a real implementation, you'd listen for inventory updates
		// and push them to connected clients
		if err := conn.WriteMessage(websocket.PingMessage, nil); err != nil {
			h.logger.WithError(err).Debug("WebSocket connection closed")
			break
		}

		// Wait for pong or close
		conn.SetReadDeadline(time.Now().Add(60 * time.Second))
		_, _, err := conn.ReadMessage()
		if err != nil {
			h.logger.WithError(err).Debug("WebSocket read error")
			break
		}
	}
}
